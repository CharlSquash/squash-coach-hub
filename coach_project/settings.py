# coach_project/settings.py

"""
Django settings for coach_project project.
Generated by 'django-admin startproject' using Django 5.2.
"""
import os
from pathlib import Path
import dj_database_url # Import dj-database-url
from dotenv import load_dotenv
from datetime import timedelta # Import timedelta for SIMPLE_JWT

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file.
load_dotenv(os.path.join(BASE_DIR, '.env'))

# --- Security Settings ---
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-!!fallback-key-used-configure-env-var!!')
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# --- Host Settings ---
# Define default hosts needed for standard local development and local network access
default_allowed_hosts = '127.0.0.1,localhost,192.168.3.6' # Added your IP back

# Get ALLOWED_HOSTS from environment variable, using defaults if not set
allowed_hosts_str = os.environ.get('ALLOWED_HOSTS', default_allowed_hosts)

# Create the final list by splitting the string and stripping whitespace
ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_str.split(',') if host.strip()]
# --- End Host Settings ---


# --- Application definition ---
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders', # Ensure 'corsheaders' is included

    # Your apps
    'planning.apps.PlanningConfig',
    'solosync_api',
]

MIDDLEWARE = [
    # CorsMiddleware should be placed high up
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'coach_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'coach_project.wsgi.application'


# --- Database ---
default_db_url = f"sqlite:///{BASE_DIR / 'db.sqlite3'}"
DATABASES = {
    'default': dj_database_url.config(default=os.environ.get('DATABASE_URL', default_db_url))
}


# --- Password validation ---
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# --- Internationalization ---
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Africa/Johannesburg' # Your specified timezone
USE_I18N = True
USE_TZ = True # Important


# --- Static files (CSS, JavaScript, Images) ---
STATIC_URL = '/static/'
STATIC_ROOT = os.environ.get('STATIC_ROOT', None)
if STATIC_ROOT and not os.path.isabs(STATIC_ROOT):
     print(f"Warning: STATIC_ROOT ('{STATIC_ROOT}') is not an absolute path.")


# --- Media files (User Uploads) ---
MEDIA_URL = os.environ.get('MEDIA_URL', '/media/')
MEDIA_ROOT = BASE_DIR / 'mediafiles/'


# --- Default primary key field type ---
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- Django REST Framework Settings ---
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}


# --- Simple JWT Settings ---
SIMPLE_JWT = {
    # Make sure this is back to a reasonable value after testing!
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
}

# --- CORS Settings (django-cors-headers) ---
CORS_ALLOW_CREDENTIALS = True # Allow cookies (like CSRF)

# List of origins allowed to make cross-site HTTP requests
# *** Updated with your specific ngrok origins ***
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://192.168.3.6:3000', # React dev server accessed via IP
]   
# CORS_ALLOW_ALL_ORIGINS = True # Use for debugging only

# --- CSRF Settings ---
# List of origins trusted for secure requests (needs HTTPS for cross-origin)
# *** Updated with your specific ngrok origins ***
_csrf_origins_env = os.environ.get('CSRF_TRUSTED_ORIGINS', '')
_csrf_origins_list = [origin.strip() for origin in _csrf_origins_env.split(',') if origin.strip()]
# Add common local dev origins AND both ngrok origins (with https://)
_trusted_origins_to_add = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://192.168.3.6:3000',
    
]
for origin in _trusted_origins_to_add:
    if origin not in _csrf_origins_list:
        _csrf_origins_list.append(origin)
CSRF_TRUSTED_ORIGINS = _csrf_origins_list
# --- End CSRF Update ---