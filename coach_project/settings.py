"""
Django settings for coach_project project.
Generated by 'django-admin startproject' using Django 5.2.
"""
import os
from pathlib import Path
import dj_database_url # Import dj-database-url
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file. 
# This will load .env found in the same directory as manage.py
load_dotenv(os.path.join(BASE_DIR, '.env')) 

# --- Security Settings ---
# Get SECRET_KEY from environment variable. Provide a default only as a last resort for local dev.
# Production MUST have a unique SECRET_KEY set in its environment.
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-!!fallback-key-used-configure-env-var!!')

# Get DEBUG from environment variable, default to False (safer) if not set.
# Ensure your local .env sets DEBUG=True
DEBUG = os.environ.get('DEBUG', 'False') == 'True' 

# Get ALLOWED_HOSTS from env var as a comma-separated string, default to local hosts
allowed_hosts_str = os.environ.get('ALLOWED_HOSTS', '127.0.0.1,localhost')
ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_str.split(',') if host.strip()]
# Add PythonAnywhere host if needed based on specific PA setup (or better, add via PA env var)
# if 'PA_ALLOWED_HOST' in os.environ: # Example using another env var
#     ALLOWED_HOSTS.append(os.environ.get('PA_ALLOWED_HOST'))

# Get CSRF_TRUSTED_ORIGINS from env var as a comma-separated string
csrf_origins_str = os.environ.get('CSRF_TRUSTED_ORIGINS', '')
CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in csrf_origins_str.split(',') if origin.strip()]
# Add PA domain if needed (e.g., if set via PA env var)
# if 'PA_DOMAIN_URL' in os.environ: # Example
#      CSRF_TRUSTED_ORIGINS.append(os.environ.get('PA_DOMAIN_URL'))

# --- Application definition ---
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'planning.apps.PlanningConfig', # Your app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'coach_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [], 
        'APP_DIRS': True, 
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'coach_project.wsgi.application'

# --- Database ---
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# Uses DATABASE_URL from .env via dj-database-url.
# Provides a default fallback to local SQLite if DATABASE_URL is not set at all.
default_db_url = f"sqlite:///{BASE_DIR / 'db.sqlite3'}"
DATABASES = {
    'default': dj_database_url.config(default=os.environ.get('DATABASE_URL', default_db_url))
}

# --- Password validation ---
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

# --- Internationalization ---
# https://docs.djangoproject.com/en/5.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Africa/Johannesburg' # Your specified timezone
USE_I18N = True
USE_TZ = True # Important for timezone-aware datetimes

# --- Static files (CSS, JavaScript, Images) ---
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = '/static/' # URL prefix for static files
# STATIC_ROOT: Read from environment variable. If empty/not set, collectstatic might fail
# (which is fine locally unless testing collectstatic). 
# Production environment (PA) MUST set this variable.
STATIC_ROOT = os.environ.get('STATIC_ROOT', None)
# Ensure STATIC_ROOT is an absolute path if set
if STATIC_ROOT and not os.path.isabs(STATIC_ROOT):
     print(f"Warning: STATIC_ROOT ('{STATIC_ROOT}') is not an absolute path.")
     # Or raise ImproperlyConfigured

# --- Media files (User Uploads) ---
# https://docs.djangoproject.com/en/5.2/topics/files/
MEDIA_URL = os.environ.get('MEDIA_URL', '/media/') # Get from env, default to /media/
# MEDIA_ROOT: Define relative to BASE_DIR for local dev. 
# Production (PA) will use its Web Tab mapping, this setting is less critical there.
MEDIA_ROOT = BASE_DIR / 'mediafiles/' 

# --- Default primary key field type ---
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'