# Generated by Django 5.2 on 2025-06-03 07:22

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planning', '0032_remove_player_date_of_birth_coach_whatsapp_opt_in_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='coachfeedback',
            options={'ordering': ['-date_recorded', 'player__last_name'], 'verbose_name': 'Coach Feedback', 'verbose_name_plural': 'Coach Feedback Entries'},
        ),
        migrations.AlterModelOptions(
            name='payslip',
            options={'ordering': ['-year', '-month', 'coach__name'], 'verbose_name': 'Payslip', 'verbose_name_plural': 'Payslips'},
        ),
        migrations.AlterField(
            model_name='activityassignment',
            name='activity_notes',
            field=models.TextField(blank=True, help_text='Specific notes for this activity instance (e.g., variations, player assignments).'),
        ),
        migrations.AlterField(
            model_name='activityassignment',
            name='duration_minutes',
            field=models.PositiveIntegerField(default=10, help_text='Estimated duration for this activity on this court.', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='activityassignment',
            name='order',
            field=models.PositiveIntegerField(default=0, help_text='Order of activity on this court within the time block.'),
        ),
        migrations.AlterField(
            model_name='backwalldriverecord',
            name='session',
            field=models.ForeignKey(blank=True, help_text='Optional: Link to session where this test was conducted.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drive_tests_conducted', to='planning.session'),
        ),
        migrations.AlterField(
            model_name='coachavailability',
            name='is_available',
            field=models.BooleanField(default=True, null=True),
        ),
        migrations.AlterField(
            model_name='coachavailability',
            name='last_action',
            field=models.CharField(blank=True, choices=[('CONFIRM', 'Confirmed'), ('DECLINE', 'Declined')], help_text='The last explicit action taken by the coach via confirmation link.', max_length=10, null=True),
        ),
        migrations.AlterField(
            model_name='coachavailability',
            name='notes',
            field=models.TextField(blank=True, help_text='Optional notes (e.g., reason for unavailability).'),
        ),
        migrations.AlterField(
            model_name='coachavailability',
            name='status_updated_at',
            field=models.DateTimeField(blank=True, help_text='Timestamp of when the status was explicitly confirmed or declined.', null=True),
        ),
        migrations.AlterField(
            model_name='coachsessioncompletion',
            name='assessments_submitted',
            field=models.BooleanField(default=False, help_text='True if the coach has submitted all required player assessments for this session for their assigned players.'),
        ),
        migrations.AlterField(
            model_name='coachsessioncompletion',
            name='confirmed_for_payment',
            field=models.BooleanField(default=False, help_text='Manually set by admin/superuser once duties are verified and all assessments are complete.'),
        ),
        migrations.AlterField(
            model_name='courtsprintrecord',
            name='session',
            field=models.ForeignKey(blank=True, help_text='Optional: Link to session where this test was conducted.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sprint_tests_conducted', to='planning.session'),
        ),
        migrations.AlterField(
            model_name='drill',
            name='duration_minutes_default',
            field=models.PositiveIntegerField(default=10, help_text='Default duration in minutes for this drill.', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='drill',
            name='ideal_num_players',
            field=models.IntegerField(blank=True, choices=[(1, '1 Player'), (2, '2 Players'), (3, '3 Players'), (4, '4+ Players')], help_text='Ideal number of players for this drill.', null=True),
        ),
        migrations.AlterField(
            model_name='drill',
            name='suitable_for_any',
            field=models.BooleanField(default=False, help_text='Check if this drill works well regardless of specific group skill level or size (within reason).'),
        ),
        migrations.AlterField(
            model_name='matchresult',
            name='opponent_score_str',
            field=models.CharField(blank=True, help_text="Opponent's score if different from player's perspective", max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='matchresult',
            name='player_score_str',
            field=models.CharField(help_text="Player's score, e.g., '3-1' or '11-9, 11-5, 11-7'", max_length=50),
        ),
        migrations.AlterField(
            model_name='matchresult',
            name='session',
            field=models.ForeignKey(blank=True, help_text='Optional: Link to session if this match was part of it.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches_played', to='planning.session'),
        ),
        migrations.AlterField(
            model_name='payslip',
            name='generated_at',
            field=models.DateTimeField(auto_now_add=True, help_text='Timestamp when this payslip record was created in the system.'),
        ),
        migrations.AlterField(
            model_name='payslip',
            name='generated_by',
            field=models.ForeignKey(blank=True, help_text='The user who initiated the generation of this payslip.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payslips_initiated_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='session',
            name='assessments_complete',
            field=models.BooleanField(default=False, help_text='Legacy field: Consider using CoachSessionCompletion instead or a property to check if all expected assessments are in.'),
        ),
        migrations.AlterField(
            model_name='session',
            name='generated_from_rule',
            field=models.ForeignKey(blank=True, help_text='Link to the recurring schedule rule, if this session was auto-generated.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_sessions', to='planning.scheduledclass'),
        ),
        migrations.AlterField(
            model_name='sessionassessment',
            name='is_hidden',
            field=models.BooleanField(default=False, help_text='If true, this assessment is hidden from player/parent view (admin/coach only).'),
        ),
        migrations.AlterField(
            model_name='sessionassessment',
            name='submitted_by',
            field=models.ForeignKey(blank=True, limit_choices_to={'is_staff': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submitted_player_assessments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='sessionassessment',
            name='superuser_reviewed',
            field=models.BooleanField(db_index=True, default=False, help_text='Checked by superuser if they have reviewed this assessment.'),
        ),
        migrations.AlterField(
            model_name='timeblock',
            name='block_focus',
            field=models.CharField(blank=True, help_text='Specific focus for this time block (e.g., Warm-up, Drills, Match Play).', max_length=200),
        ),
        migrations.AlterField(
            model_name='timeblock',
            name='rotation_interval_minutes',
            field=models.PositiveIntegerField(blank=True, help_text='Optional: Rotate players/activities every X minutes within this block.', null=True, validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='volleyrecord',
            name='session',
            field=models.ForeignKey(blank=True, help_text='Optional: Link to session where this test was conducted.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='volley_tests_conducted', to='planning.session'),
        ),
        migrations.CreateModel(
            name='GroupAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text='When the assessment was submitted.')),
                ('general_notes', models.TextField(blank=True, help_text="Coach's general assessment notes for the group/session (e.g., group commitment, venue issues, parent interactions).")),
                ('is_hidden_from_other_coaches', models.BooleanField(default=False, help_text='If true, this assessment is hidden from other coaches (visible only to assessing coach and superusers).')),
                ('assessing_coach', models.ForeignKey(blank=True, help_text='Coach (User account) who submitted this assessment.', limit_choices_to={'is_staff': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submitted_group_assessments', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_assessments', to='planning.session')),
            ],
            options={
                'verbose_name': 'Group Assessment',
                'verbose_name_plural': 'Group Assessments',
                'ordering': ['-assessment_datetime', 'session'],
                'unique_together': {('session', 'assessing_coach')},
            },
        ),
    ]
