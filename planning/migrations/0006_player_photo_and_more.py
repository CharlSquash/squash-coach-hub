# Generated by Django 5.2 on 2025-04-18 14:26

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planning', '0005_timeblock_rotation_interval_minutes_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='player',
            name='photo',
            field=models.ImageField(blank=True, help_text='Optional profile photo for the player.', null=True, upload_to='player_photos/'),
        ),
        migrations.AlterField(
            model_name='timeblock',
            name='rotation_interval_minutes',
            field=models.PositiveIntegerField(blank=True, help_text='Rotate groups every X minutes. Leave blank/0 for no rotation.', null=True),
        ),
        migrations.CreateModel(
            name='BackwallDriveRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_recorded', models.DateField(default=django.utils.timezone.now)),
                ('shot_type', models.CharField(choices=[('FH', 'Forehand'), ('BH', 'Backhand')], max_length=2)),
                ('consecutive_count', models.PositiveIntegerField(help_text='Number of consecutive drives off the back wall.')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drive_records', to='planning.player')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drive_tests', to='planning.session')),
            ],
            options={
                'ordering': ['player', '-date_recorded', 'shot_type'],
            },
        ),
        migrations.CreateModel(
            name='CourtSprintRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_recorded', models.DateField(default=django.utils.timezone.now)),
                ('duration_choice', models.CharField(choices=[('3m', '3 Minutes'), ('5m', '5 Minutes'), ('10m', '10 Minutes')], help_text='Duration of the sprint test.', max_length=3)),
                ('score', models.IntegerField(help_text='Score achieved (e.g., laps completed, distance units).')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sprint_records', to='planning.player')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sprint_tests', to='planning.session')),
            ],
            options={
                'ordering': ['player', '-date_recorded', 'duration_choice'],
            },
        ),
        migrations.CreateModel(
            name='MatchResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('opponent_name', models.CharField(blank=True, max_length=200)),
                ('player_score_str', models.CharField(help_text='Score details (e.g., 3-1, or 11-8, 11-9, 9-11, 11-5)', max_length=100)),
                ('opponent_score_str', models.CharField(blank=True, max_length=100)),
                ('is_competitive', models.BooleanField(default=False, help_text='Check if this was an official competitive match (league, tournament).')),
                ('match_notes', models.TextField(blank=True, help_text='Coach observations, tactics, key moments etc.')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_results', to='planning.player')),
                ('session', models.ForeignKey(blank=True, help_text='Link if this was a practice match within a session.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='practice_matches', to='planning.session')),
            ],
            options={
                'ordering': ['player', '-date'],
            },
        ),
        migrations.CreateModel(
            name='VolleyRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_recorded', models.DateField(default=django.utils.timezone.now)),
                ('shot_type', models.CharField(choices=[('FH', 'Forehand'), ('BH', 'Backhand')], max_length=2)),
                ('consecutive_count', models.PositiveIntegerField(help_text='Number of consecutive volleys hit successfully.')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='volley_records', to='planning.player')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='volley_tests', to='planning.session')),
            ],
            options={
                'ordering': ['player', '-date_recorded', 'shot_type'],
            },
        ),
        migrations.CreateModel(
            name='SessionAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_recorded', models.DateField(default=django.utils.timezone.now)),
                ('effort_rating', models.IntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], help_text='Coach rating of player effort/motivation for the session (1-5).', null=True)),
                ('focus_rating', models.IntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], help_text='Rating for focus/concentration (1-5).', null=True)),
                ('resilience_rating', models.IntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], help_text='Rating for resilience/handling pressure/errors (1-5).', null=True)),
                ('composure_rating', models.IntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], help_text='Rating for composure/emotional control (1-5).', null=True)),
                ('decision_making_rating', models.IntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], help_text='Rating for decision making under pressure (1-5).', null=True)),
                ('coach_notes', models.TextField(blank=True, help_text='Specific observations about effort or mental skills.')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_assessments', to='planning.player')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_assessments', to='planning.session')),
            ],
            options={
                'ordering': ['-date_recorded', 'player'],
                'unique_together': {('player', 'session')},
            },
        ),
    ]
